#use <string>

//typedef int elem;
//typedef int key;
key elem_key(elem e)
{
  return *e;
}

int key_compare(key k1, key k2)
{
  int r = k1 - k2;
  if (r == 0) {
    return 0;
  } else if (r < 0) {
    return -1;
  } else {
    return 1;
  }
}


// EFFECT: print tree T, for each line printed inserted s at the beginning
void print_tree_helper(tree * T, string s)
{
  if (T == NULL) {
    println(s);
    return;
  } else {
    print(s);
    printint(*(T->data));
    println("");
    print_tree_helper(T->left, string_join(s, "\t"));
    print_tree_helper(T->right, string_join(s, "\t"));
    return;
  }
}

// EFFECT: print tree T
void print_tree(tree * T)
{
  print_tree_helper(T, "");
  return;
}


void test()
{
  int size = 10;
  int*[] nums = alloc_array(int*, size);
  for (int i = 0; i < size; i++) {
    nums[i] = alloc(int);
    *nums[i] = i * 2 + 1;
  }

  println("Start building tree");
  tree* T = leaf(nums[4]);
  println("Print tree");
  print_tree(T);

  // tests for tree_insert(), rebalance_left(), rotate_left(), rotate_right()
  T = tree_insert(T, nums[0]);
  T = tree_insert(T, nums[1]);
  println("After inserting 1, 3");
  assert(*T->data == 3);
  print_tree(T);

  // tests for tree_insert(), rebalance_left(), rotate_left(), rotate_right()
  T = tree_insert(T, nums[3]);
  T = tree_insert(T, nums[5]);
  T = tree_insert(T, nums[2]);
  assert(*T->data == 7);
  assert(*T->left->data == 3);
  assert(*T->right->data == 9);
  print_tree(T);

  assert(tree_lookup(T,13) == NULL);
  assert(tree_lookup(T, 5) != NULL);

  return;
}


int main()
{
  test();
  return 0;
}
