/* Mystery function with a bug or two fixed
 * 15-122 Principles of Imperative Computation
 */

/*  5 */ int POW(int base, int exp) 
/*  6 */ //@requires exp >= 0;
/*  7 */ {
/*  8 */   if (exp == 0) return 1;
/*  9 */   return base * POW(base, exp-1);
/* 10 */ }
/* 11 */ 
/* 12 */ int f (int base, int exp) 
/* 13 */ //@requires exp >= 0;
/* 14 */ //@ensures \result == POW(base, exp);
/* 15 */ {
/* 16 */   int x = base;
/* 17 */   int y = exp;
/* 18 */   int r = 1;
/* 19 */   while (y > 0)
/* 20 */   //@loop_invariant y >= 0;
/* 21 */   //@loop_invariant r * POW(x,y) == POW(base, exp);
/* 22 */   {
/* 23 */     if (y % 2 == 1) {
/* 24 */       r = x * r;
/* 25 */     }
/* 26 */     x = x * x;
/* 27 */     y = y / 2;
/* 28 */   }
/* 29 */   //@assert y == 0;
/* 30 */   return r;
/* 31 */ }
