bool is_sorted(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for(int i = lower; i < upper - 1; i++)
    //@loop_invariant 0 <= i && i + 1 <= \length(A);
    {
      if(A[i] > A[i+1]) {
        return false;
      }
    }
  return true;
}

bool is_in(int x, int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for(int i = lower; i < upper; i++)
    //@loop_invariant lower <= i && i <= upper;
    {
      if(A[i] == x) return true;
    }
  return false;
}

bool le_seg(int x, int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
  for(int i = lower; i < upper; i++)
    //@loop_invariant 0 <= i && i <= \length(A);
    {
      if(!(x<=A[i])) {
        return false;
      }
    }
  return true;
}

//EX1
int binsearch1(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
        || ((0 <= \result && \result < n) && A[\result] == x);
 @*/
{
  int lower = 0;
  int upper = n;
  while(lower <= upper)
    //@loop_invariant 0 <= lower && lower <= upper + 1 && upper + 1 <= n;
    //@loop_invariant (upper + 1 == n) || (A[upper+1] > x);
    //@loop_invariant (lower == 0)  || (A[lower-1] < x);
    {
      int mid = lower + (upper - lower) / 2;
      //@assert lower <= mid && mid <= upper;
      if(A[mid] == x) return mid;
      else if(A[mid] < x) lower = mid + 1;
      else //@assert A[mid] > x;
        upper = mid - 1;
    }
  return -1;
}

//EX2
int binsearch2(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
        || ((0 <= \result && \result < n) && A[\result] == x);
  @*/
{
  int lower = 0;
  int upper = n;
  while(lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
    //@loop_invariant !is_in(x, A, 0, lower);
    //@loop_invariant !is_in(x, A, upper, n);
    {
      int mid = lower + (upper - lower) / 2;
      //@assert lower <= mid && mid < upper;
      if(A[mid] == x) return mid;
      else if (A[mid] < x) lower = mid + 1;
      else //@assert A[mid] > x;
        upper = mid;
    }
  return -1;
}


//EX3: this version binsearch will find the left most ele if is exists in A
int binsearch3(int x, int[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (-1 == \result && !is_in(x, A, 0, n))
        || ((0 <= \result && \result < n) && A[\result] == x
         && (\result == 0 || A[\result-1] != x));
  @*/
{
  int lower = 0;
  int upper = n;
  while(lower < upper)
    //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
    //@loop_invariant (lower == 0) || (A[lower - 1] < x);
    //@loop_invariant (upper == n) || (A[upper] >= x);
    {
      int mid = lower + (upper - lower) / 2;
      //@assert lower <= mid && mid < upper;
      if (A[mid] < x) lower = mid + 1;
      else //@assert A[mid] >= x;
        upper = mid;
    }
  if(A[upper] == x)
    return upper;
  else
    return -1;
}
