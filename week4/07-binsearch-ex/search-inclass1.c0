int search(int x, int[] A, int n) 
//@requires n == \length(A);
//@requires is_sorted(A, 0, n);
/*@ensures (\result == -1 && !is_in(x, A, 0, n))
  @     || (0 <= \result && \result < n
  @         && A[\result] == x); @*/
{
  int lower = 0;
  int upper = n;
  while(lower < upper)
  //@loop_invariant 0 <= lower && lower <= upper && upper <= n;
  //@loop_invariant gt_seg(x, A, 0, lower);
  //@loop_invariant lt_seg(x, A, upper, n);
  {
    int m = lower + (upper - lower)/2;
    // int m = lower/2 + upper/2;
    // int m = lower;
    //@assert lower <= m && m < upper;
    if (A[m] == x) {
      return m;
    } else if (A[m] > x) {
      upper = m;
    } else {
      //@assert A[m] < x;
      lower = m + 1;
    }
  } 
  return -1;
}

