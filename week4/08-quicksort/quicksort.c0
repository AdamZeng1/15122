/**
 * Quicksort
 *
 * 15-122 Principles of Imperative Computation
 */

int partition(int[] A, int lower, int pi, int upper)
//@requires 0 <= lower && lower <= pi && pi < upper && upper <= \length(A);
//@ensures lower <= \result && \result < upper;
//@ensures ge_seg(A[\result], A, lower, \result);
//@ensures le_seg(A[\result], A, \result, upper);
{
  int pivot = A[pi];
  swap(A, pi, lower);
  int left = lower + 1;
  int right = upper;

  while (left < right)
  //@loop_invariant lower <= left && left <= right && right <= upper;
  //@loop_invariant ge_seg(pivot, A, lower, left);
  //@loop_invariant le_seg(pivot, A, right, upper);
  //@loop_invariant pivot == A[lower];
  {
    if (A[left] <= pivot) { 
      left++;
    } else {
      //@assert A[left] > pivot;
      swap(A, left, right-1);
      right--;
    }
  }

  //@assert left == right;
  swap(A, lower, left-1);
  return left-1;
}

void sort(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(A, lower, upper);
{
  if (upper - lower <= 1) return;
  int pi = lower + (upper - lower)/2;
  //@assert lower <= pi && pi < upper;
  int mid = partition(A, lower, pi, upper);
  sort(A, lower, mid);
  sort(A, mid+1, upper);
  return;
}
