int min_index(int[] A, int lower, int upper)
//@requires 0 <= lower && lower < upper && upper <= \length(A);
//@ensures lower <= \result && \result < upper;
//@ensures le_seg(A[\result], A, lower, upper);
{
  int min_ele_index = lower;
  for(int i = lower; i < upper; i++)
    //@loop_invariant lower <= i && i <= upper;
    //@loop_invariant le_seg(A[min_ele_index], A, lower, i);
    {
      if(A[i] < A[min_ele_index]) {
        min_ele_index = i;
      }
    }
  return min_ele_index;
}

void sort(int[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
//@ensures is_sorted(A, lower, upper);
{
  int index;
  for(int i = lower; i < upper; i++)
    //@loop_invariant 0 <= i && i <= \length(A);
    //@loop_invariant is_sorted(A, lower, i);
    //@loop_invariant le_segs(A, lower, i, A, i, upper);
   {
     index = min_index(A, i, upper);
     //     //@assert le_seg(A[index], A, i, upper);
     swap(A, i, index);
   }
  return;
}
