/*
 * Hash sets, implemented with separate chaining
 *
 */

#use <util>
#use <conio>

/*************************/
/*** Client Interface ****/
/*************************/

// typedef _______* elem;
typedef int * elem;

// f(x, y) returns true if x and y contain equal keys
bool elem_equal(elem x, elem y)
/*@requires x != NULL && y != NULL; @*/
{
  return (*x) == (*y);
}

// f(x) returns the hash value of x's key
int elem_hash(elem x)
/*@ requires x != NULL; @*/
{
  return *x;
}



/**************************/
/*** Library Interface ****/
/**************************/

// typedef ________ hset;
typedef struct hset_header* hset;

int hset_size(hset H);

hset hset_new(int capacity)
/*@requires capacity > 0; @*/ ;

// Returns the element of H with the same key as x, if it exists.
// Otherwise returns NULL.
elem hset_lookup(hset H, elem x)
/*@requires x != NULL; @*/ ;

void hset_insert(hset H, elem x)
/*@requires x != NULL; @*/ ;


/******************/
/* Implementation */
/******************/

struct chain_node {
  elem data;
  struct chain_node* next;
};
typedef struct chain_node chain;

struct hset_header {
  int size;
  int capacity;               /* 0 < capacity */
  chain*[] table;             /* \length(table) == capacity */
};

int hashindex(hset H, elem x)
//@requires H != NULL && H->capacity > 0;
//@requires x != NULL;
//@ensures 0 <= \result && \result < H->capacity;
{
  return abs(elem_hash(x) % H->capacity);
}

// All hash values are correct for the current index
bool is_chain(hset H, chain* p, int i) {
  if (p == NULL) return true;
  return p->data != NULL
    && hashindex(H, p->data) == i
    && is_chain(H, p->next, i);
}

bool is_table_expected_length(chain*[] table, int length) {
  //@assert \length(table) == length;
  return true;
}

bool is_hset(hset H) {
  return  H != NULL
    && H->capacity > 0
    && H->size >= 0
    && is_table_expected_length(H->table, H->capacity);
  // What else?
}

hset hset_new(int capacity)
//@requires capacity > 0;
//@ensures is_hset(\result);
{
  hset H = alloc(struct hset_header);
  H->size = 0;
  H->capacity = capacity;
  H->table = alloc_array(chain*, capacity);
  return H;
}

elem hset_lookup(hset H, elem x)
//@requires is_hset(H);
//@requires x != NULL;
{
  int i = hashindex(H, x);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (elem_equal(p->data, x)) {
      return p->data;
    }
  }

  return NULL;
}

// EFFECT: double the size of H and rearrange each element
void hset_double(hset H)
//@requires is_hset(H);
//@ensures is_hset(H);
{
  hset new_H = hset_new(H->capacity * 2);
  for(int j = 0; j < H->capacity; j++) {
    chain * curr = H->table[j];
    while(curr != NULL) {
      hset_insert(new_H, curr->data);
      curr = curr->next;
    }
  }
  H->size = new_H->size;
  H->capacity = new_H->capacity;
  H->table = new_H->table;
  return;
}

void hset_insert(hset H, elem x)
//@requires is_hset(H);
//@requires x != NULL;
//@ensures is_hset(H);
//@ensures x == hset_lookup(H, x);
{
  int i = hashindex(H, x);
  for (chain* p = H->table[i]; p != NULL; p = p->next)
  //@loop_invariant is_chain(H, p, i);
  {
    if (elem_equal(p->data, x)) {
      p->data = x;
      return;
    }
  }

  // prepend new element
  chain* p = alloc(chain);
  p->data = x;
  p->next = H->table[i];
  H->table[i] = p;
  (H->size)++;

  // Ex1 of lecture 14
  if(H->size == H->capacity) {
    hset_double(H);
  }
}

void hset_shrink(hset H)
//@requires is_hset(H);
//@ensures is_hset(H);
{
  if(H->size > H->capacity / 4) {
    return;
  }
  hset new_H = hset_new(H->capacity / 2);

  for(int i = 0; i < H->capacity; i++)
    //@loop_invariant 0 <= i && i <= H->capacity;
    {
      for(chain * c = H->table[i]; c != NULL; c = c->next)
        //@loop_invariant is_chain(H, c, i);
        {
          hset_insert(new_H, c->data);
        }
    }

  H->size = new_H->size;
  H->capacity = new_H->capacity;
  H->table = new_H->table;
  return;
}

// EFFECT: delete x from H
void hset_delete(hset H, elem x)
//@requires is_hset(H);
//@requires x != NULL;
//@ensures is_hset(H);
{
  int i = hashindex(H, x);
  chain* prev = H->table[i];
  chain* curr = prev;
  while(curr != NULL && !elem_equal(x, curr->data))
    //@loop_invariant is_chain(H, curr, i);
    {
      prev = curr;
      curr = curr->next;
    }

  //@assert (curr == NULL) || (elem_equal(curr->data, x));
  if(curr == NULL) {
    return;
  }
  else {
    //@assert elem_equal(curr->data, x);
    if(prev == curr) {
      //@assert prev == curr && curr == H->table[i];
      H->table[i] = H->table[i]->next;
      H->size--;
      hset_shrink(H);
      return;
    }
    else {
      prev->next = curr->next;
      H->size--;
      hset_shrink(H);
      return;
    }
  }
}
