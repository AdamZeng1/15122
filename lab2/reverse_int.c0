/* If we are running using -d, we cannot include the following postcondition:
   //@ensures i == reverse_int(\result);
   to the function. Because each postcondition checking will invoke
   reverse_int(), which will invoke the postcondition checking again, thus
   forming infinite loop.
 */

bool is_reversed_int(int x, int y)
{
  for(int i = 0; i < 32; i++)

    {
      if(((x >> i) & 1) != ((y >> (31 - i)) & 1)) {
        return false;
      }
    }
  return true;

}



int reverse_int(int x)
//@ensures is_reversed_int(x, \result);
{
  int result = 0;
  int tmp_x = x;
  for(int i = 0; i < 32; i++)
    //    //@loop_invariant
    {
      result = result << 1;
      result = result | (tmp_x & 1);
      tmp_x = tmp_x >> 1;
    }
  return result;
}
