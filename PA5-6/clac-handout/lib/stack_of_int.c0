/* 
 * Stacks of int
 * 
 * 15-122 Principles of Imperative Computation */

/*** Interface to stacks of integers ***/

// typedef _______ stack;
typedef struct stack_header* stack;

bool stack_empty(stack S);      /* O(1) */
stack stack_new();              /* O(1) */
void push(stack S, int x);      /* O(1) */
int pop(stack S)                /* O(1) */
/*@requires !stack_empty(S); @*/ ;


/*** Implementation of stacks of integers ***/

/* Aux structure of linked lists of integers */
struct ilist_node {
  int data;
  struct ilist_node* next;
};
typedef struct ilist_node ilist;

/* is_segment_ilist(start, end) will diverge if list is circular! */
bool is_segment_ilist(ilist* start, ilist* end) {
  if (start == NULL) return false;
  if (start == end) return true;
  return is_segment_ilist(start->next, end);
}

/* Stacks of integers */

struct stack_header {
  ilist* top;
  ilist* bottom;
};

bool is_stack(stack S) {
  return S != NULL
    && is_segment_ilist(S->top, S->bottom);
}

bool stack_empty(stack S)
//@requires is_stack(S);
{
  return S->top == S->bottom;
}

stack stack_new()
//@ensures is_stack(\result);
//@ensures stack_empty(\result);
{
  stack S = alloc(struct stack_header);
  ilist* l = alloc(struct ilist_node); /* does not need to be initialized! */
  S->top = l;
  S->bottom = l;
  return S;
}

void push(stack S, int x)
//@requires is_stack(S);
//@ensures is_stack(S);
{
  ilist* l = alloc(struct ilist_node);
  l->data = x;
  l->next = S->top;
  S->top = l;
}

int pop(stack S)
//@requires is_stack(S);
//@requires !stack_empty(S);
//@ensures is_stack(S);
{
  int e = S->top->data;
  S->top = S->top->next;
  return e;
}
